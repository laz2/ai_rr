/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2011 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

#include "scp_keynodes.scsy"
#include "graph_keynodes.scsy"
#include "lib_keynodes.scsy"

//
// Ищет для @p vertex любую смежную вершину из волны @p prev_wave в графе @p graph.
//
// @author Dmitry Lazurkin
//
procedure(find_any_edge,
[[
	// Используемые ключевые узлы
	//
	"/graph_theory/keynode/edge_";

	// Используемые программы
	//
	get_other_vertex_incidence_edge;
]],
[{
	arc2, arc4, el3,
	edges_set, other_vertex,
	graph, vertex, prev_wave, edge // переменные для параметров
}],
{[
	1_:  in_: graph,        // обрабатываемый неориентированный граф
	2_:  in_: vertex,       // вершина, для которой ищется смежная вершина из @p prev_wave
	3_:  in_: prev_wave,    // предыдущая волна, из которой ищется смежная вершина
	4_: out_: edge          // ребро инцидентное @p vertex и найденной вершине
]})

	// Формируем множество ребер графа для итерации
	//
	searchSetStr5([
		1_:  fixed_: graph,
		2_: assign_:  arc_: const_: pos_: arc2,
		3_: assign_: node_: const_: el3,
		4_: assign_:  arc_: const_: pos_: arc4,
		5_:  fixed_: "/graph_theory/keynode/edge_",
		set3_: assign_: edges_set
	])

	// Цикл по ребрам графа
	//
	label([next_edge_label])
		searchElStr3([
			1_:  fixed_: edges_set,
			2_: assign_:  arc_: const_: pos_: arc2,
			3_: assign_: node_: const_: edge
		],, return_label)

		eraseEl([1_: fixed_: f_: arc2])

		// Проверка, инцидентно ли ребро edge вершине vertex
		//
		searchElStr3([
			1_:  fixed_: edge,
			2_: assign_: arc_: const_: pos_: arc2,
			3_:  fixed_: vertex
		],, next_edge_label)

		// Поиск вершины инцидентной ребру edge и отличной от вершины vertex
		//
		callReturn([
			1_: fixed_: get_other_vertex_incidence_edge, 
			2_: {[
				1_: edge, 
				2_: vertex, 
				3_: other_vertex
			]}
		])

		// Если найденная вершина other_vertex входит в предыдущую волну, то
		// наш поиск успешен и может быть завершен, иначе продолжаем поиск
		//
		searchElStr3([
			1_:  fixed_: prev_wave,
			2_: assign_: arc_: const_: pos_: arc2,
			3_:  fixed_: other_vertex
		], return_label, next_edge_label)

label([return_label])
	eraseEl([1_: f_: edges_set])
	return()
end
