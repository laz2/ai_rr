/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2011 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

#include "scp_keynodes.scsy"
#include "graph_keynodes.scsy"
#include "lib_keynodes.scsy"

//
// Подготавливает запуск и запускает тестовый пример для алгоритма поиска минимального пути.
//
// @see /graph_theory/find_min_path/find_min_path
//
// @author Dmitry Lazurkin
//
procedure(run_testcase,
[[
	// Используемые программы
	//
	print_graph;
	print_idtf;
	print_route;
	find_min_path;
]],
[{
	arc2, arc4, route,
	number, graph, beg_vertex, end_vertex // переменные для параметров
}],
{[
	1_:  in_: number,     // порядковый номер тестового примера
	2_:  in_: graph,      // тестовый граф
	3_:  in_: beg_vertex, // начальная вершина в графе @p graph для поиска минимального пути
	4_:  in_: end_vertex  // конечная вершина в графе @p graph для поиска минимального пути
]})
	print([
		1_: fixed_: /"Testcase "/,
		2_: fixed_: number,
		3_: fixed_: /"\n"/
	])

	printNl([1_: fixed_: /"Graph from memory:"/])
	
	callReturn([
		1_: fixed_: print_graph, 
		2_: {[
			1_: graph
		]}
	])

	printNl([1_: fixed_: /""/])

	print([1_: fixed_: /"Find minimal path from '"/])

	callReturn([
		1_: fixed_: print_idtf, 
		2_: {[
			1_: beg_vertex
		]}
	])
	
	print([1_: fixed_: /"' to '"/])

	callReturn([
		1_: fixed_: print_idtf, 
		2_: {[
			1_: end_vertex
		]}
	])

	printNl([1_: fixed_: /"'"/])

	callReturn([
		1_: fixed_: find_min_path, 
		2_: {[
			1_: graph,
			2_: beg_vertex,
			3_: end_vertex,
			4_: route
		]}
	])

	print([1_: fixed_: /"Path"/])

	ifVarAssign([1_: route],, no_path_label)

	printNl([1_: fixed_: /":"/])

	callReturn([
		1_: fixed_: print_route, 
		2_: {[
			1_: route
		]}
	])

	printNl([1_: fixed_: /""/])

	return()

label([no_path_label])
	printNl([1_: fixed_: /" isn't exist."/])
	return()

end
