/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2011 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

#include "scp_keynodes.scsy"
#include "graph_keynodes.scsy"
#include "lib_keynodes.scsy"

//
// Добавляет посещение вершины @p vertex в маршрут @p route.
//
// @author Dmitry Lazurkin
//
procedure(add_vertex_visit_to_route,
[[
	// Используемые ключевые узлы
	//
	"/graph_theory/keynode/vertex_";

	// Используемые программы
	//
	get_route_struct;
	get_route_visit;
	build_ord_bin_conn;
	bin_ord_at_1;
]],
[{
	arc2, arc4, conn,
	route_struct,
	route_visit,
	route, vertex, vertex_visit // переменные для параметров
}],
{[
	1_:  in_: route,        // связка отношения маршрут*
	2_:  in_: vertex,       // вершина, для которой нужно добавить посещение в маршрут
	3_: out_: vertex_visit  // добавленное посещение вершины
]})

	// Находим ориентированный граф структуры маршрута
	//
	callReturn([
		1_: fixed_: get_route_struct, 
		2_: {[
			1_: route, 
			2_: route_struct
		]}
	])

	// Находим отношение соответствия маршрута
	//
	callReturn([
		1_: fixed_: get_route_visit, 
		2_: {[
			1_: route, 
			2_: route_visit
		]}
	])

	// Проверяем, может уже есть посещение для этой вершины существует
	//
	callReturn([
		1_: fixed_: bin_ord_at_1, 
		2_: {[
			1_: route_visit, 
			2_: vertex, 
			3_: vertex_visit
		]}
	])

	ifVarAssign([1_: vertex_visit], return_label)

	// Посещения не существует, значит создаем его
	//
	genEl([1_: assign_: node_: const_: vertex_visit])

	genElStr5([
		1_:  fixed_: route_struct,
		2_: assign_: arc_: pos_: const_: arc2,
		3_:  fixed_: vertex_visit,
		4_: assign_: arc_: pos_: const_: arc4,
		5_:  fixed_: "/graph_theory/keynode/vertex_"
	])

	callReturn([
		1_: fixed_: build_ord_bin_conn, 
		2_: {[
			1_: route_visit, 
			2_: vertex_visit, 
			3_: vertex,
			4_: conn
		]}
	])

label([return_label])
	return()

end
