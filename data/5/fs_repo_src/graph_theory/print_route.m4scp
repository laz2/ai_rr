/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2011 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

#include "scp_keynodes.scsy"
#include "graph_keynodes.scsy"
#include "lib_keynodes.scsy"

//
// Выводит на консоль маршрута @p route.
//
// @author Dmitry Lazurkin
//
procedure(print_route,
[[
	arc_text =c= /" -> "/; // Так будет выглядеть дуга при выводе на консоль

	// Используемые программы
	//
	bin_ord_at_2;
	get_route_struct;
	get_route_visit;
	get_route_struct_begin;
	print_idtf;
	printnl_idtf;
]], 
[{
	arc2, arc4,
	route_struct,   // структура маршрута
	route_visit,    // отношение соответствия для текущего маршрута
	cur_visit,      // текущее посещение для вывода
	visited_vertex, // текущая посещенная вершина
	route           // переменные для параметров
}], 
{[
	1_:  in_: route // связка отношения "маршрут*".
]})
	// Находим ориентированный граф структуры маршрута
	//
	callReturn([
		1_: fixed_: get_route_struct, 
		2_: {[
			1_: route, 
			2_: route_struct
		]}
	])

	// Находим отношение соответствия маршрута
	//
	callReturn([
		1_: fixed_: get_route_visit, 
		2_: {[
			1_: route, 
			2_: route_visit
		]}
	])

	// Находим начальную вершину в ориентированном графе структуры маршрута
	//
	callReturn([
		1_: fixed_: get_route_struct_begin, 
		2_: {[
			1_: route_struct, 
			2_: cur_visit 
		]}
	])

	// Находим вершину, соответствующую начальному посещению
	//
	callReturn([
		1_: fixed_: bin_ord_at_2, 
		2_: {[
			1_: route_visit, 
			2_: cur_visit, 
			3_: visited_vertex
		]}
	])

	// Выводим текущую посещенную вершину
	//
	callReturn([
		1_: fixed_: print_idtf, 
		2_: {[ 1_: visited_vertex ]}
	])

	label([next_visit_label])
		// Находим следующее посещение
		//
		callReturn([
			1_: fixed_: bin_ord_at_2, 
			2_: {[
				1_: route_struct,
				2_: cur_visit,
				3_: cur_visit
			]}
		])

		ifVarAssign([1_: cur_visit],, return_label)

		// Находим вершину, соответствующую текущему посещению
		//
		callReturn([
			1_: fixed_: bin_ord_at_2, 
			2_: {[
				1_: route_visit, 
				2_: cur_visit, 
				3_: visited_vertex
			]}
		])

		print([1_: fixed_: arc_text])

		// Выводим текущую посещенную вершину
		//
		callReturn([
			1_: fixed_: print_idtf, 
			2_: {[ 1_: visited_vertex ]}
		])

		nop(next_visit_label)

label([return_label])
	return()

end
